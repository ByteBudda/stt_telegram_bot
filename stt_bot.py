# -*- coding: utf-8 -*-
# transcribe_bot.py

import os
import asyncio
import logging
import time
from typing import Optional

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.constants import ChatAction

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
import pydub
from pydub import AudioSegment
import speech_recognition as sr

# --- –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ---

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
TELEGRAM_BOT_TOKEN = "token"

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
TEMP_MEDIA_DIR = "temp_media"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –†–ï–ß–ò ---
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–∑—è—Ç–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞ utils.py –∏ –Ω–µ–º–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞

async def transcribe_voice(file_path: str) -> Optional[str]:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞ .wav —Å –ø–æ–º–æ—â—å—é Google Speech Recognition.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    if not os.path.exists(file_path):
        logger.error(f"File not found for transcription: {file_path}")
        return "[–û—à–∏–±–∫–∞: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω]"

    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
    recognizer = sr.Recognizer()
    text = None
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º to_thread –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π, –±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ
        def recognize_sync():
            with sr.AudioFile(file_path) as source:
                audio_data = recognizer.record(source)
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
                return recognizer.recognize_google(audio_data, language="ru-RU")

        text = await asyncio.to_thread(recognize_sync)
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{text}'")
        
    except sr.UnknownValueError:
        logger.warning("Google Speech Recognition –Ω–µ —Å–º–æ–≥–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
        text = "[–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞]"
    except sr.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É Google Speech Recognition: {e}")
        text = f"[–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}]"
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}", exc_info=True)
        text = "[–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ]"
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        try:
            os.remove(file_path)
            logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
        except OSError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")
            
    return text


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–´–• –ò –í–ò–î–ï–û–°–û–û–ë–©–ï–ù–ò–ô ---
# –õ–æ–≥–∏–∫–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ handle_text_voice_video, –Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–¥–∏–∞

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if not update.message:
        return

    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ: –≥–æ–ª–æ—Å –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫
    is_voice = update.message.voice is not None
    is_video_note = update.message.video_note is not None

    if not (is_voice or is_video_note):
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –º—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É
    status_message = await update.message.reply_text("üéôÔ∏è –ü–æ–ª—É—á–∏–ª, –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É...")
    
    temp_file_path = None # –ü—É—Ç—å –∫ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É WAV —Ñ–∞–π–ª—É
    original_media_path = None # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É oga/mp4 —Ñ–∞–π–ª—É

    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        os.makedirs(TEMP_MEDIA_DIR, exist_ok=True)

        if is_voice:
            await context.bot.send_chat_action(chat_id, ChatAction.RECORD_VOICE)
            media_file = await update.message.voice.get_file()
            base_name = f"voice_{user_id}_{int(time.time())}"
            original_media_path = os.path.join(TEMP_MEDIA_DIR, f"{base_name}.oga")
            temp_file_path = os.path.join(TEMP_MEDIA_DIR, f"{base_name}.wav")
            source_format = "ogg"
            
        elif is_video_note:
            await context.bot.send_chat_action(chat_id, ChatAction.RECORD_VIDEO)
            media_file = await update.message.video_note.get_file()
            base_name = f"vnote_{user_id}_{int(time.time())}"
            original_media_path = os.path.join(TEMP_MEDIA_DIR, f"{base_name}.mp4")
            temp_file_path = os.path.join(TEMP_MEDIA_DIR, f"{base_name}.wav")
            source_format = "mp4"

        # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await media_file.download_to_drive(original_media_path)
        logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {original_media_path}")

        # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV —Å –ø–æ–º–æ—â—å—é pydub
        await status_message.edit_text("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ...")
        
        def convert_sync():
             audio = AudioSegment.from_file(original_media_path, format=source_format)
             audio.export(temp_file_path, format="wav")

        await asyncio.to_thread(convert_sync)
        logger.info(f"–§–∞–π–ª —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {temp_file_path}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}", exc_info=True)
        await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
        return
    finally:
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π oga/mp4 —Ñ–∞–π–ª, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        if original_media_path and os.path.exists(original_media_path):
            os.remove(original_media_path)

    # 3. –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å –∏–∑ WAV —Ñ–∞–π–ª–∞
    await status_message.edit_text("üß† –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
    transcribed_text = await transcribe_voice(temp_file_path) # –§—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —É–¥–∞–ª–∏—Ç wav —Ñ–∞–π–ª

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if transcribed_text:
        await status_message.edit_text(f"\n\n{transcribed_text}", parse_mode='Markdown')
    else:
        # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–Ω–∞
        await status_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")


# --- –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê ---

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    if TELEGRAM_BOT_TOKEN == "–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù":
        logger.error("–û—à–∏–±–∫–∞: –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN!")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π
    # –§–∏–ª—å—Ç—Ä `filters.VOICE | filters.VIDEO_NOTE` –æ–∑–Ω–∞—á–∞–µ—Ç "–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫"
    application.add_handler(MessageHandler(filters.VOICE | filters.VIDEO_NOTE, handle_media))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ (polling)
    application.run_polling()


if __name__ == "__main__":
    main()
